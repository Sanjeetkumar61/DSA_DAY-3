 #include <stdio.h>
 #include<stdio.h>

#define MAXSIZE 10

int Queue[MAXSIZE];
int front = -1;
int rear = -1;

// Function prototypes
void insert();
void deleteElement();
void display();
int isFull();
int isEmpty();
void enQueue(int value);

int main() {
    int choice;

    do {
        printf("\n1. Insert\n2. Delete\n3. Display\n4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                insert();
                break;
            case 2:
                deleteElement();
                break;
            case 3:
                display();
                break;
            case 4:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice! Please try again.\n");
        }
    } while (choice != 4);

    return 0;
}

void insert() {
    int value;
    printf("Enter the value to insert: ");
    scanf("%d", &value);
    enQueue(value);
}

void enQueue(int value) {
    if (isFull()) {
        printf("Queue is full!\n");
        return;
    }

    if (front == -1) {
        front = 0;  // Initialize front when the first element is inserted
    }
    rear = (rear + 1) % MAXSIZE;
    Queue[rear] = value;
    printf("Inserted %d\n", value);
}

void deleteElement() {
    if (isEmpty()) {
        printf("Queue is empty! Nothing to delete.\n");
        return;
    }

    printf("Deleted %d\n", Queue[front]);
    if (front == rear) {
        // If there was only one element, reset the queue
        front = rear = -1;
    } else {
        front = (front + 1) % MAXSIZE;
    }
}

void display() {
    if (isEmpty()) {
        printf("Queue is empty!\n");
        return;
    }

    printf("Queue elements are: ");
    for (int i = front; i != rear; i = (i + 1) % MAXSIZE) {
        printf("%d ", Queue[i]);
    }
    printf("%d\n", Queue[rear]);
}

int isFull() {
    return (front == (rear + 1) % MAXSIZE);
}

int isEmpty() {
    return (front == -1);
}
